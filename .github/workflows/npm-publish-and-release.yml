name: NPM Publish and GitHub Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install conventional-changelog dependencies
        run: npm install -g conventional-changelog-cli conventional-changelog-writer conventional-changelog-angular

      - name: Generate changelog
        id: github_release
        run: |
          # Get the previous tag to compare against
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, use the first commit
            FROM_REF=$(git rev-list --max-parents=0 HEAD)
          else
            FROM_REF=$PREVIOUS_TAG
          fi

          # Generate changelog
          CHANGELOG=$(conventional-changelog -p angular -r 1 --outfile /dev/null --from=$FROM_REF --to=${GITHUB_REF#refs/tags/})

          # Save changelog to file and to output
          echo "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Outline MCP Server v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Outline MCP Server v${{ steps.get_version.outputs.VERSION }}

            ${{ steps.github_release.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
